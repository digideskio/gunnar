{
  "name": "smoosh",
  "preferGlobal": "true",
  "description": "a tool for packaging your JavaScript and CSS projects",
  "version": "0.3.0",
  "authors": [
    "Jacob Thornton <@fat>",
    "Dustin Diaz <@ded>"
  ],
  "keywords": [
    "packager",
    "packaging",
    "smoosher",
    "javascript",
    "css",
    "dependencies"
  ],
  "directories": {
    "lib": "./lib/smoosh"
  },
  "main": "./index.js",
  "engines": {
    "node": ">= 0.4.1"
  },
  "dependencies": {
    "colors": ">= 0.3.0",
    "gzip": ">= 0.1.0",
    "jshint": ">= 0.1.4",
    "rimraf": ">= 1.0.0",
    "uglify-js": ">= 0.0.1",
    "asciimo": ">= 0.3.1",
    "sqwish": ">= 0.0.6"
  },
  "bin": {
    "smoosh": "./bin/smoosh"
  },
  "readme": "SMOOOOSH\n=========\nHow would you smoosh a lion and a tiger? A tialiganer, right?\n\n![smoosh](http://f.cl.ly/items/3o0y3m3o2Z3l1e0i1V2V/Screen%20shot%202011-03-05%20at%2012.13.54%20AM.png)\n\nSMOOSH is a tool for packaging your CSS & JavaScript projects. It will lint your JavaScript with [JSHint](http://jshint.com), then build and minify your files (if you'd like) with [UglifyJS](https://github.com/mishoo/UglifyJS) for JavaScript, and [Sqwish](https://github.com/ded/sqwish) for CSS.\n\nSmoosh is available as an npm package. To install, run the following command:\n\n    $ npm install smoosh\n\nCONFIG\n======\nCurrently, smoosh requires a config.json file to work. Your config file should look something like this (check the examples folder for a working example):\n\n    {\n      \"VERSION\": \"0.1\", // optional\n      \"JSHINT_OPTS\": { ... }\n      \"JAVASCRIPT\": {\n        \"DIST_DIR\": \"dist\", // optional\n        \"base\": [ ... ],\n        \"secondary\": [ ... ]\n      },\n      \"CSS\": {\n        \"core\": [ ... ]\n      }\n    }\n\nYour config options include:\n\n  * VERSION: an optional version number which will be appended to your built files\n  * JAVASCRIPT|CSS:\n  * key: the name of your compiled file (ie: 'mootools-core', 'base-bundle', etc.)\n  * value: an array of file paths to be bundled (ie. <code>['./src/drag.js', './src/drop.js']</code>)\n  + DIST_DIR: the directory to output your files to (if no directory is specified, 'dist' will be used)\n  + JSHINT_OPTS: the options to use if running jshint\n\nUSING SMOOSH WITH TERMINAL\n==========================\n\nonce installed with npm, smoosh can be accessed easily from the command line! Just create your config file (shown above), then run commands. Here's a list of some of them:\n\n\n    //any of these commands will execute all smoosh tasks with config.json\n    $ smoosh ./config.json\n    $ smoosh make ./config.json\n    $ smoosh -m ./config.json\n\n    //executing either of these commands will destroy the dist folder\n    $ smoosh clean ./config.json\n    $ smoosh -d ./config.json\n\n    //these will generate ugliyjs minified versions of your packaged source\n    $ smoosh compressed ./config.json\n    $ smoosh -c ./config.json\n\n    //these will generate full, uncompressed version of your packaged source\n    $ smoosh uncompressed\n    $ smoosh -f ./config.json\n\n    //executing either of these commands will build both compressed and uncompressed versions of your source\n    $ smoosh build ./config.json\n    $ smoosh -b ./config.json\n\n    //these will run jshint against your uncompressed source\n    $ smoosh run ./config.json\n    $ smoosh -r ./config.json\n\n    //the -a flag will run analyze.. you must include a build type for analyze to work\n    $ smoosh -ca ./config\n    $ smoosh -ba ./config\n    $ smoosh -fa ./config\n\n    //as you might have guessed, you can specify multiple flags at the same time\n    $ smoosh -dba ./config //<-- this will clean the dist folder, build new files, and then analyze them\n\n\nUSING SMOOSH WITH THE CODEZ\n===========================\n\nonce installed, smoosh is pretty easy to use...\n\n``` js\nvar smoosh = require('smoosh');\n```\n\nOnce required there are several methods available to you:\n\n<code>config</code>\n------\nAs stated above, smoosh requires that you pass it the path to your configuration json file. To do that, you would do:\n\n``` js\nsmoosh.config('./config.json')\n```\n\n<code>clean</code>\n-----\nThe clean method will remove your distribution directory. **Warning** This will empty your entire DIST directory. So this may be unwanted behavior if your DIST directory is \"./\". It is preferred that this is only used when you have a dedicated dist folder. Eg: \"./src/build\" or \"./dist\"\n\n``` js\nsmoosh.clean();\n```\n\n<code>run</code>\n---\nRun takes one argument; a string which specifies what to run. Currently run only works with jslint, therefore you can do either:\n\n``` js\nsmoosh.run('jslint');\n//or\nsmoosh.run();\n```\n\nIn the future we may add more useful things here.\n\n<code>build</code>\n-----\nBuild is used to build your sources together. You can build uncompressed or compressed files or both! You can use it like this:\n\n``` js\nsmoosh.build('uncompressed');\n//or\nsmoosh.build('compressed');\n//or\nsmoosh.build() // <-- this will build both compressed and uncompressed\n```\n\n<code>analyze</code>\n-------\nAnalyze is useful when you're curious if you're making your files larger or smaller. It will return relevant file size for uncompressed, compressed, or gzipped files.\n\n``` js\nsmoosh.analyze('uncompressed');\n//or\nsmoosh.analyze('compressed');\n//or\nsmoosh.analyze('gzipped'); //it gzips the compressed files only\n//or\nsmoosh.analyze(); //which will do analyze all types\n```\n\n<code>make</code>\n----\nMake can currently be used as a shortcut to run all smoosh methods... It requires one argument, the path to the config file.json.\n\n``` js\nsmoosh.make('./config.json');\n\n//is the same as\nsmoosh.config('./config.json').run().build().analyze();\n```\n\n**Happy Smooshing!**",
  "_id": "smoosh@0.3.0",
  "_from": "smoosh@0.3.0"
}
